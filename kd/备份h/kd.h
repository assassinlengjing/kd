/*
   thisx file has been generated by IDA.
   It contains local type definitions from
   the type library 'KD-336.exe'
*/

#include <cstdio>
#include <Windows.h>
#include <ddraw.h>






#define __int8 char
#define __int16 short
#define __int32 int
#define __int64 long long
/*
	struct HWND__;
	struct tagWNDCLASSA;
	struct HINSTANCE__;
	struct HICON__;
	struct HBRUSH__;
	struct HTASK__;
	struct HMMIO__;
	struct tagBITMAPINFO;
	struct _iobuf;
	*/
	/* 1 */
	struct _SCOPETABLE_ENTRY
	{
		int EnclosingLevel;
		void* FilterFunc;
		void* HandlerFunc;
	};

	/* 2 */
	typedef struct _SCOPETABLE_ENTRY* PSCOPETABLE_ENTRY;

	/* 21 */
	//typedef unsigned int DWORD;

	/* 3 */
	struct _EH3_EXCEPTION_REGISTRATION
	{
		struct _EH3_EXCEPTION_REGISTRATION* Next;
		PVOID ExceptionHandler;
		PSCOPETABLE_ENTRY ScopeTable;
		DWORD TryLevel;
	};

	/* 4 */
	typedef struct _EH3_EXCEPTION_REGISTRATION EH3_EXCEPTION_REGISTRATION;

	/* 5 */
	typedef struct _EH3_EXCEPTION_REGISTRATION* PEH3_EXCEPTION_REGISTRATION;

	/* 6 */
	struct CPPEH_RECORD
	{
		DWORD old_esp;
		EXCEPTION_POINTERS* exc_ptr;
		struct _EH3_EXCEPTION_REGISTRATION registration;
	};

	/* 8 */
	//typedef int LONG;

	/* 7 */
	/*
	struct tagRECT
	{
		LONG left;
		LONG top;
		LONG right;
		LONG bottom;
	};
	*/

	/* 10 */
	typedef unsigned int UINT;

	/* 9 */
#pragma pack(push, 1)
	/*
	struct joyinfo_tag
	{
		UINT wXpos;
		UINT wYpos;
		UINT wZpos;
		UINT wButtons;
	};*/
#pragma pack(pop)

	/* 12 */
	typedef unsigned __int16 WORD;

	/* 13 */
	typedef char CHAR;

	/* 11 */
#pragma pack(push, 1)
	/*
	struct tagJOYCAPSA
	{
		WORD wMid;
		WORD wPid;
		CHAR szPname[32];
		UINT wXmin;
		UINT wXmax;
		UINT wYmin;
		UINT wYmax;
		UINT wZmin;
		UINT wZmax;
		UINT wNumButtons;
		UINT wPeriodMin;
		UINT wPeriodMax;
		UINT wRmin;
		UINT wRmax;
		UINT wUmin;
		UINT wUmax;
		UINT wVmin;
		UINT wVmax;
		UINT wCaps;
		UINT wMaxAxes;
		UINT wNumAxes;
		UINT wMaxButtons;
		CHAR szRegKey[32];
		CHAR szOEMVxD[260];
	};
	*/
#pragma pack(pop)

	/* 15 */
	typedef HWND__* HWND;

	/* 18 */
	typedef unsigned int UINT_PTR;

	/* 17 */
	typedef UINT_PTR WPARAM;

	/* 20 */
	//typedef int LONG_PTR;

	/* 19 */
	typedef LONG_PTR LPARAM;

	/* 23 */
	/*
	struct tagPOINT
	{
		LONG x;
		LONG y;
	};*/

	/* 22 */
	typedef tagPOINT POINT;

	/* 14 */
	/*
	struct tagMSG
	{
		HWND hwnd;
		UINT message;
		WPARAM wParam;
		LPARAM lParam;
		DWORD time;
		POINT pt;
	};*/

	/* 16 */
	/*
	struct HWND__
	{
		int unused;
	};
	*/

	/* 24 */
	typedef tagWNDCLASSA WNDCLASSA;

	/* 27 */
	typedef LONG_PTR LRESULT;

	/* 26 */
	typedef LRESULT(__stdcall* WNDPROC)(HWND, UINT, WPARAM, LPARAM);

	/* 28 */
	typedef HINSTANCE__* HINSTANCE;

	/* 30 */
	typedef HICON__* HICON;

	/* 32 */
	typedef HICON HCURSOR;

	/* 33 */
	typedef HBRUSH__* HBRUSH;

	/* 35 */
//	typedef const CHAR* LPCSTR;

	/* 25 */
	/*
	struct tagWNDCLASSA
	{
		UINT style;
		WNDPROC lpfnWndProc;
		int cbClsExtra;
		int cbWndExtra;
		HINSTANCE hInstance;
		HICON hIcon;
		HCURSOR hCursor;
		HBRUSH hbrBackground;
		LPCSTR lpszMenuName;
		LPCSTR lpszClassName;
	};*/

	/* 29 */
	/*
	struct HINSTANCE__
	{
		int unused;
	};*/

	/* 31 */
	/*
	struct HICON__
	{
		int unused;
	};*/

	/* 34 */
	/*
	struct HBRUSH__
	{
		int unused;
	};*/

	/* 37 */
	typedef DWORD FOURCC;

	/* 36 */
#pragma pack(push, 1)
	/*
	struct _MMCKINFO
	{
		FOURCC ckid;
		DWORD cksize;
		FOURCC fccType;
		DWORD dwDataOffset;
		DWORD dwFlags;
	};
	*/
#pragma pack(pop)

	/* 41 */
//	typedef CHAR* LPSTR;

	/* 40 */
	typedef LRESULT __stdcall MMIOPROC(LPSTR lpmmioinfo, UINT uMsg, LPARAM lParam1, LPARAM lParam2);

	/* 39 */
	typedef MMIOPROC* LPMMIOPROC;

	/* 42 */
	typedef HTASK__* HTASK;

	/* 44 */
	typedef char* HPSTR;

	/* 45 */
	typedef HMMIO__* HMMIO;

	/* 38 */
#pragma pack(push, 1)
	/*
	struct _MMIOINFO
	{
		DWORD dwFlags;
		FOURCC fccIOProc;
		LPMMIOPROC pIOProc;
		UINT wErrorRet;
		HTASK htask;
		LONG cchBuffer;
		HPSTR pchBuffer;
		HPSTR pchNext;
		HPSTR pchEndRead;
		HPSTR pchEndWrite;
		LONG lBufOffset;
		LONG lDiskOffset;
		DWORD adwInfo[3];
		DWORD dwReserved1;
		DWORD dwReserved2;
		HMMIO hmmio;
	};*/
#pragma pack(pop)

	/* 43 */
	/*
	struct HTASK__
	{
		int unused;
	};*/

	/* 46 */
#pragma pack(push, 1)
	/*
	struct HMMIO__
	{
		int unused;
	};
	*/
#pragma pack(pop)

	/* 47 */
	typedef tagBITMAPINFO BITMAPINFO;

	/* 50 */
	/*
	struct tagBITMAPINFOHEADER
	{
		DWORD biSize;
		LONG biWidth;
		LONG biHeight;
		WORD biPlanes;
		WORD biBitCount;
		DWORD biCompression;
		DWORD biSizeImage;
		LONG biXPelsPerMeter;
		LONG biYPelsPerMeter;
		DWORD biClrUsed;
		DWORD biClrImportant;
	};*/

	/* 49 */
	typedef tagBITMAPINFOHEADER BITMAPINFOHEADER;

	/* 53 */
	typedef unsigned __int8 BYTE;

	/* 52 */
	/*
	struct tagRGBQUAD
	{
		BYTE rgbBlue;
		BYTE rgbGreen;
		BYTE rgbRed;
		BYTE rgbReserved;
	};*/

	/* 51 */
	typedef tagRGBQUAD RGBQUAD;

	/* 48 */
	/*
	struct tagBITMAPINFO
	{
		BITMAPINFOHEADER bmiHeader;
		RGBQUAD bmiColors[1];
	};*/

	/* 55 */
	typedef BYTE* LPBYTE;

	/* 56 */
	typedef void* HANDLE;

	/* 54 */
	/*
	struct _STARTUPINFOA
	{
		DWORD cb;
		LPSTR lpReserved;
		LPSTR lpDesktop;
		LPSTR lpTitle;
		DWORD dwX;
		DWORD dwY;
		DWORD dwXSize;
		DWORD dwYSize;
		DWORD dwXCountChars;
		DWORD dwYCountChars;
		DWORD dwFillAttribute;
		DWORD dwFlags;
		WORD wShowWindow;
		WORD cbReserved2;
		LPBYTE lpReserved2;
		HANDLE hStdInput;
		HANDLE hStdOutput;
		HANDLE hStdError;
	};*/

	/* 57 */
	/*
	struct _cpinfo
	{
		UINT MaxCharSize;
		BYTE DefaultChar[2];
		BYTE LeadByte[12];
	};*/

	/* 58 */
	//typedef _iobuf myFILE;

	/* 59 */
	/*
	struct _iobuf
	{
		char* _ptr;
		int _cnt;
		char* _base;
		int _flag;
		int _file;
		int _charbuf;
		int _bufsiz;
		char* _tmpfname;
	};*/

	/* 60 */
	struct FuncInfoV1
	{
		int magicNumber;
		int maxState;
		void* pUnwindMap;
		int nTryBlocks;
		void* pTryBlockMap;
		int nIPMapEntries;
		void* pIPtoStateMap;
	};

	/* 61 */
	struct UnwindMapEntry
	{
		int toState;
		void* action;
	};

	/* 62 */
	//struct _CancellationTokenRegistration;

	/* 63 */
	//struct UMSFreeVirtualProcessorRoot;

	/* 64 */
	//struct SchedulerBase;

	/* 65 */
	//struct SchedulerProxy;

	/* 66 */
	//struct VirtualProcessor;

	/* 67 */
	//struct InternalContextBase;

	/* 68 */
	struct DNameNode;

	/* 69 */
	//struct UMSThreadScheduler;

	/* 70 */
	//struct ExecutionResource;

	/* 71 */
	//struct ContextBase;

	/* 72 */
	//struct _UnrealizedChore;

	/* 73 */
	//struct HardwareAffinity;

	/* 74 */
	//struct SchedulingRing;

	/* 75 */
	struct streambuf;

	/* 76 */
	struct ios;

	/* 77 */
	//struct VirtualProcessorRoot;

	/* 78 */
	struct type_info;
